@page
@using System;
@using System.Data.SqlClient;
@{
    Layout = "_Layout";
    ViewData["Title"] = "Checkin";

    if (Request.Cookies["venueId"] == null)
    {
        //Redirect to index if we are logged in
        Response.Redirect("Register");
    }

    // Connecting to database.
    String connectionString = "Server=tcp:amnotdaniel.duckdns.org,1433;Initial Catalog=projectstudio;Persist Security Info=False;User ID=sa;Password=ProjectStudio1;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False;Connection Timeout=30;";
    SqlConnection db = new SqlConnection(connectionString);

    // Form check.
    if (Request.Method == "POST")
    {
        // Unique ID checkin.
        if (!string.IsNullOrWhiteSpace(Request.Form["username"]))
        {
            // Get form data.
            string uName = Request.Form["username"];

            db.Open();

            // Check for uniqueId in database + store result.
            SqlCommand existingID = new SqlCommand("SELECT ID FROM Users WHERE uniqueId = @uName", db);
            existingID.Parameters.AddWithValue("@uName", uName);

            var existingIDResult = existingID.ExecuteScalar();

            // If uniqueId exists, log a new checkin. Else, notify user of incorrect details.
            if (existingIDResult != null)
            {
                SqlCommand newCheckin = new SqlCommand("INSERT INTO CheckinLogs (dateLog, venueId, uniqueId) VALUES (@dateLog, @venueId, @uniqueId)", db);
                newCheckin.Parameters.AddWithValue("@dateLog", DateTime.Now);
                newCheckin.Parameters.AddWithValue("@venueId", Request.Cookies["venueId"]);
                newCheckin.Parameters.AddWithValue("@uniqueId", existingIDResult);
                newCheckin.ExecuteNonQuery();
            }
            else
            {
                // Notify user of incorrect username.
            }

            // Close connection + end script.
            db.Close();
            return;
        }

        var venueId = Request.Cookies["venueId"];
        string fName = Request.Form["firstName"];
        string lName = Request.Form["lastName"];
        string phone = Request.Form["contact"];
        System.Diagnostics.Debug.WriteLine("Should not be here.");

        if (!String.IsNullOrWhiteSpace(fName) && !String.IsNullOrWhiteSpace(fName) && !String.IsNullOrWhiteSpace(phone))
        {
            string uniqueId = (lName.Substring(0, 2) + fName.Substring(0, 2)).ToUpper();
            Console.WriteLine(uniqueId);

            // Open connection
            db.Open();

            // Convert names to upper.
            fName = fName.ToUpper();
            lName = lName.ToUpper();

            // Query to check for database entry matching User inputs.
            SqlCommand IDCheck = new SqlCommand("SELECT ID FROM Users WHERE firstName = @fName AND lastName = @lName AND phoneNumber = @pNum", db);

            // Query parameters.
            IDCheck.Parameters.AddWithValue("@fName", fName);
            IDCheck.Parameters.AddWithValue("@lName", lName);
            IDCheck.Parameters.AddWithValue("@pNum", phone);


            var IDResult = IDCheck.ExecuteScalar();

            // Query to check for database entry matching User inputs.
            SqlCommand uniqueIDCheck = new SqlCommand("SELECT uniqueId FROM Users WHERE firstName = @fName AND lastName = @lName AND phoneNumber = @pNum", db);

            // Query parameters.
            uniqueIDCheck.Parameters.AddWithValue("@fName", fName);
            uniqueIDCheck.Parameters.AddWithValue("@lName", lName);
            uniqueIDCheck.Parameters.AddWithValue("@pNum", phone);


            // Store query result.
            var uniqueIDResult = uniqueIDCheck.ExecuteScalar();


            if (uniqueIDResult == null)
            {
                //Querying count of possible uniqueIds in database  //NEED FIX FOR LIKE
                SqlCommand checkingUniqueIds = new SqlCommand("SELECT COUNT(*) AS userCount FROM Users WHERE uniqueId LIKE @uniqueId", db);

                //Query parameters
                checkingUniqueIds.Parameters.AddWithValue("@uniqueId", uniqueId + "%");

                var theCount = checkingUniqueIds.ExecuteScalar();
                theCount = theCount.ToString();
                if (theCount != "0")
                {
                    uniqueId = uniqueId + theCount.ToString();
                }



                // Query to add new User to database.
                SqlCommand addNewUser = new SqlCommand("INSERT INTO Users (firstName, lastName, phoneNumber, uniqueId) VALUES (@fName, @lName, @pNum, @uniqueId)", db);

                // Query parameters.
                addNewUser.Parameters.AddWithValue("@fName", fName);
                addNewUser.Parameters.AddWithValue("@lName", lName);
                addNewUser.Parameters.AddWithValue("@pNum", phone);
                addNewUser.Parameters.AddWithValue("@uniqueId", uniqueId);

                // Executing query.
                addNewUser.ExecuteNonQuery();

                // Selecting newly added Users uniqueId.
                SqlCommand idCommand = new SqlCommand("SELECT ID FROM Users WHERE firstName = @fName AND lastName = @lName AND phoneNumber = @pNum", db);

                idCommand.Parameters.AddWithValue("@fName", fName);
                idCommand.Parameters.AddWithValue("@lName", lName);
                idCommand.Parameters.AddWithValue("@pNum", phone);

                // Setting userIDResult to newly created Users uniqueId.
                IDResult = idCommand.ExecuteScalar();
            }

            // Log checkin query.
            string logQuery = "INSERT INTO CheckinLogs (dateLog, venueId, uniqueId) VALUES(@theDate, @venueId, @ID)";
            SqlCommand logCommand = new SqlCommand(logQuery, db);

            // Query parameters.
            logCommand.Parameters.AddWithValue("@theDate", DateTime.Now);
            logCommand.Parameters.AddWithValue("@venueId", venueId);
            logCommand.Parameters.AddWithValue("@ID", IDResult);

            // Executing query.
            logCommand.ExecuteNonQuery();

            // Close connection.
            db.Close();

            //Response.Redirect("Success?venue="+Request.Cookies["bname"]+"&name="+fName+"&time="+DateTime.Now);
        }
    }
}

<body>
    <div class="container">
        <main role="main" class="pb-3 align-self-center">
            <br /><br /><br />
            <div class="card">
                <div class="card-body">
                    <div class="row d-flex justify-content-center">
                        <div class="col-sm-6 border-right">
                            <h5 class="card-title">Scan your QR code for a faster checkin</h5>
                        </div>
                        <div class="col-sm-6">
                            <form method="post" id="manualForm" action="">
                                <h5 class="card-title">Check in with your Unique Identifier:</h5>
                                <div class="form-group">
                                    <input type="text" class="form-control" name="username" id="unique" oninput="disableManual(this.value)" maxlength="100" placeholder="Unique ID..." required>
                                </div>
                                <hr />

                                <h5 class="card-title">Check-in manually</h5>
                                <div class="form-group">
                                    <input type="text" class="form-control" name="firstName" id="firstname" oninput="disableUnique(this.value)" maxlength="100" placeholder="First name..." required>
                                </div>

                                <div class="form-group">
                                    <input type="text" class="form-control" name="lastName" id="lastname" oninput="disableUnique(this.value)" maxlength="100" placeholder="Last name..." required>
                                </div>

                                <div class="form-group">
                                    <input type="tel" class="form-control" name="contact" id="contact" oninput="disableUnique(this.value)" pattern="0[0-9]{9}||[0-9]{9}" placeholder="Phone number..." required>
                                </div>

                                <div class="form-group">
                                    <button type="submit" id="manualSubmit" class="btn btn-primary" onsubmit="">Check-in</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <div class="modal fade" id="manualSuccessful" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Success!</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="128" height="128" fill="green" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                    </svg>
                    <p class="h3 justify-content-center">You have successfully checked into @Request.Cookies["venueName"].</p>
                </div>
            </div>
        </div>
    </div>

</body>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>
    function disableManual(value) {
        document.getElementById("firstname").disabled = value != "";
        document.getElementById("lastname").disabled = value != "";
        document.getElementById("contact").disabled = value != "";
    }
    function disableUnique(value) {
        document.getElementById("unique").disabled = value != "";
    }

    // To be initiated on submit of "manualForm" 
    $("#manualForm").submit(function (e) {

        // Prevents normal submit of form
        e.preventDefault();

        // Grabs form data and URL for AJAX Request
        var form = $(this);
        var url = form.attr('action');

        // AJAX Request
        $.ajax({
            type: "POST",
            url: url,
            data: form.serialize(),

            // To be done if AJAX Request is successful
            success: function () {

                // Shows "manualSuccessful" modal
                $('#manualSuccessful').modal('show');

                // Clears form contents
                $("#manualForm").trigger('reset');

                // Hides "manualSuccessful" modal after 5 seconds
                setTimeout(function () {
                    $('#manualSuccessful').modal('hide');
                }, 5000);
            }
        });
    });
</script>