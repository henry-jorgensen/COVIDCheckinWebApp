@page
@using System.Text;
@using System.Data.SqlClient;
@using System.Security.Cryptography;
@{
    Layout = "_Layout";
    ViewData["Title"] = "Login";

    if (Request.Cookies["venueId"] != null)
    {
        //Redirect to index if we are logged in
        Response.Redirect("Index");
    }

    ViewData["Title"] = "Login";

    String connectionString = "Server=tcp:amnotdaniel.duckdns.org,1433;Initial Catalog=projectstudio;Persist Security Info=False;User ID=sa;Password=ProjectStudio1;MultipleActiveResultSets=False;Encrypt=False;TrustServerCertificate=False;Connection Timeout=30;";
    SqlConnection db = new SqlConnection(connectionString);

    bool invalidPassword = false;

    var email = "";
    var password = "";

    if (Request.Method == "POST")
    {
        email = Request.Form["email"];
        password = Request.Form["password"];

        if (!String.IsNullOrWhiteSpace(email) && !String.IsNullOrWhiteSpace(email))
        {
            email = email.ToUpper();
            password = Encrypt(Request.Form["password"]);

            SqlCommand CHECKLOGIN = new SqlCommand("SELECT venueId, venueName FROM Venue WHERE ownerEmail = @0 AND ownerPassword = @1", db);
            CHECKLOGIN.Parameters.AddWithValue("@0", email);
            CHECKLOGIN.Parameters.AddWithValue("@1", password);

            db.Open();
            SqlDataReader reader = CHECKLOGIN.ExecuteReader();

            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    //Store venueID in cookies to signify we are logged in
                    Response.Cookies.Append("venueId", reader.GetValue(0).ToString());
                    Response.Cookies.Append("venueName", reader.GetString(1));

                    //Redirect back to Index when successfully registered
                    Response.Redirect("Index");
                }
            }
            else
            {
                invalidPassword = true;
            }
        }
        else
        {
            invalidPassword = true;
        }
    }

    static string Encrypt(string data)
    {
        using (SHA256 hash = SHA256.Create())
        {
            byte[] bytes = hash.ComputeHash(Encoding.UTF8.GetBytes(data));

            StringBuilder builder = new StringBuilder();

            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}

<div class="container">
    <main role="main" class="pb-3">
        <br /><br /><br />

        <form method="post" action="">
            <div class="row d-flex justify-content-center">
                <div class="col-sm-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Login</h5>
                            <div class="form-group">
                                <input type="email" class="form-control @(invalidPassword==true ? "is-invalid" : "")" name="email" placeholder="@(invalidPassword==true ? "Incorrect email or Password" : "Email")">
                            </div>

                            <div class="form-group">
                                <input type="password" class="form-control @(invalidPassword==true ? "is-invalid" : "")" name="password" placeholder="@(invalidPassword==true ? "Incorrect email or Password" : "Password")">
                            </div>

                            <div class="form-group">
                                <button type="submit" class="btn btn-primary">Login</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </main>
</div>